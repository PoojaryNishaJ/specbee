<?php

/**
 * @file
 * Contains nishaj_exercise.module.
 */
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityViewDisplayInterface;
use Drupal\Core\Form\FormStateInterface;
/**
 * @file
 * Contains nishaj_exercise.module.
 */

use Drupal\nishaj_exercise\Event\UserLoginEvent;

// Included the event that is created that is user login event.
// To use the constant variable here.

/**
 * Nisha_exercise_form_alter():  used to alter form.
 */
function nishaj_exercise_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  // The $route = \Drupal::routeMatch()->getRouteName().
  // Print_r($route).
  // Exit.
  $data = \Drupal::service('custom_service')->getName();
  // Returns the name of a configuration form
  // Print_r($data);
  // exit;
}

/**
 * Implements hook_theme().
 */
function nishaj_exercise_theme($existing, $type, $theme, $path) {
  // Nishaj_exercise_theme used to define new hook theme.
  return [
    'block_plugin_template' => [
                // Name of the template file.
      'variables' => [
                    // Defined variables.
        'text' => "",
        'hexcode' => "",
      ],
    ],
  ];
}

/**
 * Implements hook_user_login().
 */
function nishaj_exercise_user_login($account) {
  // Instantiate our event.
  $event = new UserLoginEvent($account);
  // Initializing the object for the event.
  // Get the event_dispatcher service and dispatch the event.
  $event_dispatcher = \Drupal::service('event_dispatcher');
  // Service to dispatch the event.
  $event_dispatcher->dispatch($event, UserLoginEvent::EVENT_NAME);
  // Dispatching the event and passing the argument of event object to this.
}

/**
 * Implements hook_page_attachments_alter().
 */
// function nishaj_exercise_page_attachments_alter(array &$attachments) {

//   $attachments['#attached']['library'][] = 'nishaj_exercise/css_lib';
//   $attachments['#attached']['drupalSettings']['nishaj_exercise']['color_body'] = "testing";
// }
// /**
//  * Implements hook_entity_view_alter().
//  */
// function nishaj_exercise_entity_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
//   // Check the entity type and bundle.
//   if ($entity->getEntityTypeId() === 'node' && $entity->bundle() === 'article') {
//     $build['#title'] = 'Modified Title';
//   }
// }
/**
 * Implements hook_entity_view().
 */
function nishaj_exercise_entity_view(array &$build, EntityInterface $entity, $view_mode, $langcode) {
  // Check the entity type and bundle.
  if ($entity->getEntityTypeId() === 'node' && $entity->bundle() === 'article') {
    $build['body'][0]['#text'] .= ' Text added.';
  }
}
// /**
//  * Implements hook_entity_presave()
//  */
// function nishaj_exercise_entity_presave(EntityInterface $entity) {.
//   if ($entity->getEntityTypeId() === 'node') {
//       $entity->set('title', 'Entity presaving the values');
//     }
//   }



// /**
//  * Implements hook_node_presave().
//  */
// function nishaj_exercise_node_presave($node) {

//   print_r($node->getCacheTags());

//   print_r($node->getCacheContext());
//   exit;
// }

// /**
//  * Implements hook_entity_insert()
//  */
//   function nishaj_exercise_entity_insert(EntityInterface $entity) {
//     if ($entity->getType() == 'article'){
//       print_r("entity insert");
//       exit;
//     }
//   }


